name: Deploy PR

on:
  workflow_run:
    workflows: [ci]
    types: [completed]

jobs:
  deploy-pr:
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success'
    environment: deploy_pr
    permissions:
      deployments: write
    steps:

      - name: Download build artifact
        uses: actions/github-script@v3
        with:
          script: |
            let artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{ github.event.workflow_run.id }},
            });
            artifacts = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "build"
            });
            if (artifacts.length <= 0) {
              throw new Error("No artifact found.");
            }
            const matchArtifact = artifacts[0];
            const download = await github.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            const fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/artifact.zip', Buffer.from(download.data));

      - name: Unzip artifact
        run: unzip artifact.zip

      - name: Get PR number
        id: get-pr-number
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require("fs");
            const prId = parseInt(fs.readFileSync("./pr.txt", "utf8"), 10);
            if (isNaN(prId) || prId <= 0) {
              throw new Error("Invalid PR id.");
            }
            return prId;

      - name: Get commmit sha
        id: get-commit-sha
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require("fs");
            const sha = fs.readFileSync("./github_sha.txt", "utf8").trim();
            const validChars = ["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"];
            if (!sha) {
              throw new Error("Missing commit sha.");
            }
            for (const char of sha) {
              if (!validChars.includes(char)) {
                throw new Error("Sha contains an invalid character: " + char);
              }
            }
            return sha;

      # Normally github automatically displays a deployment status for workflows
      # that are related to a specific commit. But since this workflow is triggered
      # by the 'workflow_run' event, the commit sha for this run is the sha from
      # the 'main' branch rather than the commit from the PR.
      # So we'll manually create a deployment status, this also allows us to
      # set the environment_url so that github displays a button that leads you
      # directly to the deployed page.
      - name: Create deployment status
        id: create-deployment-status
        uses: actions/github-script@v3
        env:
          BUILD_COMMIT_SHA: ${{steps.get-commit-sha.outputs.result }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const {BUILD_COMMIT_SHA} = process.env;
            const {data: deploymentData} = await github.request("POST /repos/{owner}/{repo}/deployments", {
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: BUILD_COMMIT_SHA,
              environment: "PR preview",
            });

            await kit.request("POST /repos/{owner}/{repo}/deployments/{deploymentId}/statuses", {
              owner, repo,
              deploymentId: deploymentData.id,
              state: "in_progress",
            });

            return deploymentData.id;

      - name: Deploy files
        env:
          PR_DEPLOY_TOKEN: ${{ secrets.PR_DEPLOY_TOKEN }}
          PR_ID: ${{ steps.get-pr-number.outputs.result }}
        run: |
          curl -X POST -H "DEPLOY_TOKEN: $PR_DEPLOY_TOKEN" -H "Content-Type: application/x-tar" --data-binary @build_files.tar "https://deploy.renda.studio/pr?id=$PR_ID"

      - name: Update deployment status success
        uses: actions/github-script@v3
        env:
          DEPLOYMENT_ID: ${{ steps.create-deployment-status.outputs.result }}
          PR_ID: ${{ steps.get-pr-number.outputs.result }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const {DEPLOYMENT_ID, PR_ID} = process.env;
            await kit.request("POST /repos/{owner}/{repo}/deployments/{deploymentId}/statuses", {
              owner: context.repo.owner,
              repo: context.repo.repo,
              deploymentId: DEPLOYMENT_ID,
              state: "success",
              environment_url: `https://pr-${ PR_ID }.renda.studio`
            });

      - name: Update deployment status failure
        if: ${{ failure() }}
        uses: actions/github-script@v3
        env:
          DEPLOYMENT_ID: ${{ steps.create-deployment-status.outputs.result }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const {DEPLOYMENT_ID} = process.env;
            await kit.request("POST /repos/{owner}/{repo}/deployments/{deploymentId}/statuses", {
              owner: context.repo.owner,
              repo: context.repo.repo,
              deploymentId: DEPLOYMENT_ID,
              state: "failure",
            });
